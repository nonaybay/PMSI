@use 'sass:color';
@use 'sass:map';
@use 'sass:math';

@use '../variables/color' as variable;


@function _c($value) { @return if(($value < 0), 0, if(($value > 1), 1, $value));}
@function _value($value) { @return _c($value / variable.$max-value);}



@function _linear($value, $gamma) {
    $value: _value($value);
    $condition: ($value < variable.$linear);
    $true: ($value / variable.$common-divisor);
    $false: math.pow((($value + variable.$minimum-calc) / variable.$maximum-calc), $gamma);

    @return if($condition, $true, $false);
}



@function _gamma($value, $gamma)    {
    $value                          :       _value($value);
    $condition                      :       ($value > variable.$gamma);
    $true                           :       (variable.$maximum-calc * math.pow($value, (1 / $gamma)) - variable.$minimum-calc);
    
    @return                         if($condition, $true, $false);
}



@function linear-srgb($value)       {       @return _linear($value, variable.$srgb-gamma);                  }
@function linear-p3($value)         {       @return _linear($value, variable.$p3-gamma);                    }
@function gamma-srgb($value)        {       @return _gamma($value, variable.$srgb-gamma);                   }
@function gamma-p3($value)          {       @return _gamma($value, variable.$p3-gamma);                     }



@function luminance($color)         {
    $r                              :       color.red($color);
    $g                              :       color.green($color);
    $b                              :       color.blue($color);

    $r                              :       linear-p3($r);
    $g                              :       linear-p3($g);
    $b                              :       linear-p3($b);

    $r                              :       variable.$p3-r * $r;
    $g                              :       variable.$p3-g * $g;
    $b                              :       variable.$p3-b * $b;

    @return ($r + $g + $b);
}



$luminance-base                     :       luminance(hsl(0, 0%, 50%));



@function determine-luminance($color) {
    $luminance                      :       luminance($color);
    $condition                      :       ($luminance >= $luminance-base);
    $true                           :       'light';
    $false                          :       'dark';

    @return if($condition, $true, $false);
}



@function get-contrast-ratio($alpha, $beta) {
    $luminance-alpha                :       luminance($alpha);
    $luminance-beta                 :       luminance($beta);

    $maximum                        :       (math.max($luminance-alpha, $luminance-beta) + 0.05);
    $minimum                        :       (math.min($luminance-alpha, $luminance-beta) + 0.05);

    @return ($maximum / $minimum);
}



@function _gray-light($index) {
    @if map.has-key(variable.$color-gray-light, $index) {
        @return map.get(variable.$color-gray-light, $index);
    } @else {
        @warn '< error > ~ Not found key [#{$index}] in map $color-gray-light. Returning rgb(142, 142, 147) instead.';
        @return map.get(variable.$color-gray-light, 1);
    }
}



@function _gray-dark($index) {
    @if map.has-key(variable.$color-gray-dark, $index) {
        @return map.get(variable.$color-gray-dark, $index);
    } @else {
        @warn '< error > ~ Not found key [#{$index}] in map $color-gray-dark. Returning rgb(142, 142, 147) instead.';
        @return map.get(variable.$color-gray-dark, 1);
    }
}



@function color-gray($tone, $index) {
    $condition: ($tone == 'light');
    $true: _gray-light($index);
    $false: _gray-dark($index);

    @return if($condition, $true, $false);
}



@function color-dark($color) {
    $r: color.red($color) + 10;
    $g: color.green($color) + 10;
    $b: color.blue($color) + 10;

    @return rgb($r, $g, $b);
}



@function colored($color-name) {
    @if map.has-key(variable.$color-light, $color-name) {
        @return map.get(variable.$color-light, $color-name);
    } @else if map.has-key(variable.$color-light-alt, $color-name) {
        @return map.get(variable.$color-light-alt, $color-name);
    } @else {
        @warn '< error > ~ color name not found [#{$color-name}] on the $color-light and $color-light-alt maps. Returning gray 1 instead.';
        @return color-gray('light', 1);
    }
}

